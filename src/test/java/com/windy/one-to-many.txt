
@Transactional(readOnly=true)
# findByName();

@Modifying
@Transactional
# updateUser();

OneToMany

# Let’s create the relationship between TrainingProgram and the Course entity.
You’ll make a bidirectional, one-to-many relationship, meaning that you can navigate from training programs to courses, and from courses to their training program. This is a two-step process.

public class TrainingProgram {

  private String name;

  @OneToMany(cascade = CascadeType.ALL, mappedBy = "trainingProgram")
  private Set<Course> courses = new HashSet<Course>();

}

Any change to the training program, including adding a course, cascade.
Removing a training program will remove its courses.

From the Java perspective, a TrainingProgram holds a Set of Course objects. The Course object holds a reference to a TrainingProgram.

public class Course {

  @ManyToOne
  private TrainingProgram trainingProgram;

}

If you’re defining a bidirectional one-to-many mapping as you did in the preceding example, make sure to use the --mappedBy attribute so that JPA keeps the relationship defined with two physical tables.

TWO TABLES OR THREE? If you forget to specify the --mappedBy setting in the one-to-many mapping, you might find that you’ll end up with three tables in this relationship: training_program, course, and training_program_course, with the extra table containing both the course_id and training_program_id.
